name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Linting and formatting checks
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      
      - name: Check formatting
        run: cargo fmt --all --check
        
      - name: Run clippy
        run: cargo clippy -- -Dwarnings

  # Coverage
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install coverage tools
        run: |
          cargo install grcov
          # Install llvm-profdata (part of llvm-tools)
          rustup component add llvm-tools-preview

      - name: Generate code coverage
        run: |
          set -euo pipefail

          # Add llvm-tools to PATH
          export PATH="$(rustc --print sysroot)/lib/rustlib/x86_64-unknown-linux-gnu/bin:$PATH"
          
          export CARGO_INCREMENTAL=0
          export RUSTFLAGS="-Cinstrument-coverage"
          export LLVM_PROFILE_FILE="$(pwd)/target/llvm-cov-target/tbfs-%p-%m.profraw"

          # Create coverage target directory
          mkdir -p target/llvm-cov-target

          cargo test --all-features

          # Find all profraw files
          echo "Finding profraw files..."
          profraw_files=$(find target/llvm-cov-target -name "*.profraw" -type f)
          
          if [ -z "$profraw_files" ]; then
            echo "Error: No profraw files found!"
            exit 1
          fi

          # Merge profraw files into a single profraw file
          echo "Merging profraw files..."
          merged_profraw="target/llvm-cov-target/merged.profraw"
          
          # Count profraw files
          profraw_count=$(echo "$profraw_files" | wc -l)
          
          if [ "$profraw_count" -eq 1 ]; then
            # If only one profraw file, just copy it
            llvm-profdata merge -output="$merged_profraw" $profraw_files
          else
            # Merge multiple profraw files
            llvm-profdata merge -output="$merged_profraw" $profraw_files
          fi
          
          # Verify merged file exists
          if [ ! -f "$merged_profraw" ]; then
            echo "Error: Failed to merge profraw files"
            exit 1
          fi
          
          echo "Profraw files merged successfully into $merged_profraw"

          # Create coverage directories
          mkdir -p site/coverage

          # Collect binary paths
          binary_paths=""
          if [ -d "target/debug/deps" ]; then
            binary_paths="$binary_paths target/debug/deps"
          fi
          if [ -d "target/debug" ]; then
            binary_paths="$binary_paths target/debug"
          fi
          
          if [ -z "$binary_paths" ]; then
            echo "Error: No binary directories found"
            exit 1
          fi
          
          echo "Using binary paths: $binary_paths"

          # Generate HTML coverage report
          echo "Generating HTML coverage report..."
          grcov "$merged_profraw" \
            --binary-path $binary_paths \
            --source-dir . \
            --output-types html \
            --branch \
            --ignore-not-existing \
            --ignore "target/*" \
            --ignore ".cargo/*" \
            --ignore "*/tests/*" \
            --excl-line "GRCOV_EXCL_LINE" \
            --excl-start "GRCOV_EXCL_START" \
            --excl-stop "GRCOV_EXCL_STOP" \
            --output-path site/coverage

          # Clean up profraw files
          find target/llvm-cov-target -name "*.profraw" -delete

          generated_on=$(date -u "+%Y-%m-%d %H:%M UTC")
          sed "s/{{GENERATED_ON}}/${generated_on}/g" .github/templates/site-index.html > site/index.html
          sed "s/{{GENERATED_ON}}/${generated_on}/g" .github/templates/coverage-index.html > site/coverage/index.html

      - name: Upload site artifacts
        uses: actions/upload-artifact@v4
        with:
          name: site-content
          path: site/

  # Build
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      
      - name: Cargo build
        run: cargo build

  # Test
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      
      - name: Cargo test
        run: cargo test

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: cargo audit

  # Build and test with matrix
  test-matrix:
    name: Build and Test (Matrix)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Minimum supported Rust version
          - rust-version: 1.88.0
            target: x86_64-unknown-linux-gnu
          # Stable Rust version
          - rust-version: stable
            target: x86_64-unknown-linux-gnu
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}
          targets: ${{ matrix.target }}
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}-${{ matrix.rust-version }}
          cache-on-failure: true
      
      - name: Build
        run: cargo build --target ${{ matrix.target }}
      
      - name: Run tests
        run: cargo test --target ${{ matrix.target }}

  # Documentation
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      
      - name: Build documentation
        run: cargo doc --all-features --no-deps
      
      - name: Prepare documentation for site
        run: |
          mkdir -p site
          cp -r target/doc site/docs
      
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: site/

  # Deploy site with code coverage and docs to GitHub Pages
  deploy-site:
    name: Deploy Site to GitHub Pages
    runs-on: ubuntu-latest
    needs: [docs, coverage]
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download site artifacts
        uses: actions/download-artifact@v4
        with:
          name: site-content
          path: temp-site/

      - name: Download documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: temp-docs/

      - name: Merge artifacts
        run: |
          mkdir -p site
          cp -r temp-site/* site/
          cp -r temp-docs/* site/

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
