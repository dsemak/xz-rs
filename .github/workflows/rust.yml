name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Linting and formatting checks
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      
      - name: Check formatting
        run: cargo fmt --all --check
        
      - name: Run clippy
        run: cargo clippy -- -Dwarnings

  # Coverage
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install grcov
        run: cargo install grcov

      - name: Generate code coverage
        run: |
          set -euo pipefail

          export CARGO_INCREMENTAL=0
          export RUSTFLAGS="-Cinstrument-coverage"
          export LLVM_PROFILE_FILE="cargo-test-%p-%m.profraw"

          cargo test --all-features

          mkdir -p site/coverage
          grcov . --binary-path ./target/debug/deps/ -s . -t html --branch --ignore-not-existing --ignore "target/*" --ignore "*/tests/*" -o site/coverage

          find . -name "*.profraw" -delete

          generated_on=$(date -u "+%Y-%m-%d %H:%M UTC")
          sed "s/{{GENERATED_ON}}/${generated_on}/g" .github/templates/site-index.html > site/index.html
          sed "s/{{GENERATED_ON}}/${generated_on}/g" .github/templates/coverage-index.html > site/coverage/index.html

      - name: Upload site artifacts
        uses: actions/upload-artifact@v4
        with:
          name: site-content
          path: site/

  # Build
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      
      - name: Cargo build
        run: cargo build

  # Test
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      
      - name: Cargo test
        run: cargo test

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: cargo audit

  # Build and test with matrix
  test-matrix:
    name: Build and Test (Matrix)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Minimum supported Rust version
          - rust-version: 1.88.0
            target: x86_64-unknown-linux-gnu
          # Stable Rust version
          - rust-version: stable
            target: x86_64-unknown-linux-gnu
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}
          targets: ${{ matrix.target }}
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}-${{ matrix.rust-version }}
          cache-on-failure: true
      
      - name: Build
        run: cargo build --target ${{ matrix.target }}
      
      - name: Run tests
        run: cargo test --target ${{ matrix.target }}

  # Documentation
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      
      - name: Build documentation
        run: cargo doc --all-features --no-deps
      
      - name: Prepare documentation for site
        run: |
          mkdir -p site/docs
          cp -r target/doc/* site/docs/
      
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: site/docs/

  # Deploy site with code coverage and docs to GitHub Pages
  deploy-site:
    name: Deploy Site to GitHub Pages
    runs-on: ubuntu-latest
    needs: [docs, coverage]
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download site artifacts
        uses: actions/download-artifact@v4
        with:
          name: site-content
          path: site/

      - name: Download documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: site/docs/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
